"use strict";(self.webpackChunkinterview_guide=self.webpackChunkinterview_guide||[]).push([[579],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:13},i="Interview Q & A",l={unversionedId:"java/interview",id:"java/interview",title:"Interview Q & A",description:"Basic Questions",source:"@site/docs/java/interview.mdx",sourceDirName:"java",slug:"/java/interview",permalink:"/java/interview",draft:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Programs for Interview",permalink:"/java/programs"},next:{title:"Spring Boot",permalink:"/spring-boot"}},s={},p=[{value:"Basic Questions",id:"basic-questions",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interview-q--a"},"Interview Q & A"),(0,a.kt)("h2",{id:"basic-questions"},"Basic Questions"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1. What are 4 major OOP concepts?")),(0,a.kt)("p",null,"Abstraction, Polymorphism, Inheritance, Encapsulation"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2. \u200b\u200bWhat is \u200bpolymorphism?")),(0,a.kt)("p",null,"Polymorphism is the ability of an object to take on many forms. In Java, there are two types of polymorphism such as Compile Time Polymorphism (or Static Polymorphism) & Run time Polymorphism (or Dynamic Polymorphism)"),(0,a.kt)("p",null,"\u200b\u200bCompile Time Polymorphism \u2014 Method Overloading\n\u200b\u200bRun Time Polymorphism \u2014 Method Overriding"),(0,a.kt)("p",null,"\u200b",(0,a.kt)("strong",{parentName:"p"},"\u200b3. \u200bWhat is Method Overloading & Overriding?")),(0,a.kt)("p",null,"Overloading:\nMethods have same names but different number or type or order of parameters. Overloading is determined at the compile time."),(0,a.kt)("p",null,"E.g.\ndisplay(String name)\ndisplay(String name, int number)\ndisplay(int number, String name)"),(0,a.kt)("p",null,"Overriding:\nA child class implements the method with same signature as a method in a parent class."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u200b\u200b4. Why Method Overriding is called dynamic polymorphism?")),(0,a.kt)("p",null,"In method overriding both the super & sub class have same method signature, compile doesn\u2019t figure out which method to call at compile-time. In this case, JVM decides which method to call at runtime that\u2019s why it\u2019s called dynamic polymorphism."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u200b\u200b5. Will return type of method considered for overloading?"),"\nNo, method won\u2019t be considered overloaded, if the return type is\u200b the\u200b only different\u200b between two methods\u200b."),(0,a.kt)("p",null,"For Overloading, method name should be same and either of the following should be true.\nChange in number of parameter\nChange in type of parameter\nChange in order of parameter"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"6. What is data encapsulation and whats the significance ?")),(0,a.kt)("p",null,"Data encapsulation is binding data and function together. Its significance is we can hide implementation details from user."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"7. Difference between Break and Continue Statement")),(0,a.kt)("p",null,"Break skips the loop completely and execute next statement after loop. Whereas Continue skips only the current iteration of loop and continue to execute the next iteration of loop."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"8. What is the use of final keyword in Java ?")),(0,a.kt)("p",null,"Final have different meaning depends on the context it\u2019s been used.\nIn class : Final class can\u2019t be inherited further..simply there cant be any subclass for a final class. String is the example for final class in Java.\nIn Property: If a class property is declared as final, it will be treated as constant.. so value can\u2019t be changes further (so needs a value while creating itself).\nIn Method: if method declared as final, it can\u2019t be override"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"9. Whether the program get compile, if public static void main changed to static public void main?")),(0,a.kt)("p",null,"Compilation will get successful"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"10. In How many ways you can create a Java String object?")),(0,a.kt)("p",null,"a.) Assign String value directly"),(0,a.kt)("p",null,"String name =\u201dVicky AV\u201d;"),(0,a.kt)("p",null,"b.) Using new operator"),(0,a.kt)("p",null,"String name= new String(\u201cVicky AV\u201d);"),(0,a.kt)("p",null,"c.) Using character array"),(0,a.kt)("p",null,"char[] nameArray = {\u2018v\u2019,\u2019i\u2019,\u2019c\u2019,\u2019k\u2019,\u2019y\u2019,\u2019 \u2018,\u2019A\u2019,\u2019V\u2019};\nString name= new String(nameArray);"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"11. What is the use of toString() method in Java")),(0,a.kt)("p",null,"Whenever you print an object using toString() method, it will give textual representation of the object."),(0,a.kt)("p",null,"We can override toString() method to give meaningful textual representation for an object. Used in debugging and logging."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"12. What are all access specifier in Java ? State their purposes.")),(0,a.kt)("p",null,"Private: Only the same class can use it\nPublic: Any class can use it\nProtected: Same class as well as inherited class can use it\ndefault: Only classes in same package can use it"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"13. Can you make constructor final?")),(0,a.kt)("p",null,"No, Constructor can\u2019t be final."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"14. What is constructor overloading and what is purpose of default constructor ?")),(0,a.kt)("p",null,"Like method overloading, constructor also can be overloaded. For overloading, we have same method name (here method name is same as class name since constructor) but difference in either of the following"),(0,a.kt)("p",null,"Number of parameters\nType of parameter\nOrder of parameters"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"15. How many constructor a class can have ?")),(0,a.kt)("p",null,"Constructor is a special method with class name as method name. Java supports constructor overloading. So we can have any number of constructors in Java.\nBut If you are not specifying any constructor, compiler will add a default constructor to your class (constructor without parameter). So there will be at least one constructor in a Java class."))}u.isMDXComponent=!0}}]);