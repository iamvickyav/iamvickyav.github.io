"use strict";(self.webpackChunkinterview_guide=self.webpackChunkinterview_guide||[]).push([[149],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7816:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:9},l="Collection & Streams",i={unversionedId:"java/collection",id:"java/collection",title:"Collection & Streams",description:"Story behind Collection",source:"@site/docs/java/collection.mdx",sourceDirName:"java",slug:"/java/collection",permalink:"/java/collection",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Java Generics",permalink:"/java/generics"},next:{title:"How To",permalink:"/java/how-to"}},s={},c=[{value:"Story behind Collection",id:"story-behind-collection",level:2},{value:"Java 1.2 and Collection rebirth",id:"java-12-and-collection-rebirth",level:2},{value:"List",id:"list",level:2},{value:"ArrayList",id:"arraylist",level:3},{value:"LinkedList",id:"linkedlist",level:3},{value:"Set",id:"set",level:2},{value:"HashSet",id:"hashset",level:3},{value:"TreeSet",id:"treeset",level:3},{value:"LinkedHashSet",id:"linkedhashset",level:3},{value:"Map",id:"map",level:2},{value:"Map is not part of collection why?",id:"map-is-not-part-of-collection-why",level:3},{value:"Collections class",id:"collections-class",level:2},{value:"Java 8 Streams API",id:"java-8-streams-api",level:2},{value:"Stream Samples",id:"stream-samples",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"collection--streams"},"Collection & Streams"),(0,r.kt)("h2",{id:"story-behind-collection"},"Story behind Collection"),(0,r.kt)("p",null,"Handling large number of objects situation is not new in Java. Even when Java first introduced we have Vector, HastTable classes to work with Collection of objects."),(0,r.kt)("p",null,"But on that time importance were given to multi-threading than efficiency."),(0,r.kt)("p",null,"So by default HastTable and Vector classes are synchronized and are thread safe. In order to achieve thread safe they compromised in performance. Later they figured performance matters than thread safety in Collection."),(0,r.kt)("h2",{id:"java-12-and-collection-rebirth"},"Java 1.2 and Collection rebirth"),(0,r.kt)("p",null,"So a complete new set of classes and interfaces were introduced in Java 1.2 to redefine the way Java deals with collection."),(0,r.kt)("p",null,"On top of it we have a number of interfaces developed for collection."),(0,r.kt)("p",null,"Collection interface is the primary interface (with add, addAll, iterator methods) which declares basic definition to work with any collection."),(0,r.kt)("p",null,"Java introduced 4 important data structures to deal with collection of objects such as List, Set, Map, Queue (though the first three are widely used)."),(0,r.kt)("p",null,"List, Set, Queue are interfaces extending collection interface but map interface doesnot extends collection interface."),(0,r.kt)("h2",{id:"list"},"List"),(0,r.kt)("p",null,"List is ordered and will allow duplicates"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"List implementation classes")),(0,r.kt)("h3",{id:"arraylist"},"ArrayList"),(0,r.kt)("p",null,"Uses Java Array behind the scences. It stores data in insertion order. Best if we are going to perform more read operation. For accessing any element in the ArrayList irrespective of the position, ArrayList consumes same time."),(0,r.kt)("h3",{id:"linkedlist"},"LinkedList"),(0,r.kt)("p",null,"Uses Doubly Linked List Data Structure behind the scences. (Second node have pointer to first and third elements and so on). Stores data in insertion order. Best if we have more insertion and deletion operation."),(0,r.kt)("h2",{id:"set"},"Set"),(0,r.kt)("p",null,"Set wont allow duplicates"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Set implementation classes")),(0,r.kt)("h3",{id:"hashset"},"HashSet"),(0,r.kt)("p",null,"Stores data in a random order (unpredictable). HashSet uses Hashing algorithm in back end. It can only store unique elements. Best for addition."),(0,r.kt)("h3",{id:"treeset"},"TreeSet"),(0,r.kt)("p",null,"Stores data in sorted order (ascending)."),(0,r.kt)("p",null,"Uses Red Black Tree algorithm in back end. Stores only unique elements. Best for frequent read/write operation."),(0,r.kt)("h3",{id:"linkedhashset"},"LinkedHashSet"),(0,r.kt)("p",null,"Uses LinkedList and HashSet in back end. Stores unique elements but in insertion order."),(0,r.kt)("h2",{id:"map"},"Map"),(0,r.kt)("p",null,"Everything is stored as key value pair (both key and value are Objects). Keys are unique. One key mapped to one value."),(0,r.kt)("p",null,"Important Map methods: put(), get(), keySet(), entrySet()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Concrete implementation classes")),(0,r.kt)("p",null,"Map provides three implementation classes such as HashMap, TreeMap, LinkedHashMap. Character of all the three classes are same as HashSet, TreeSet, LinkedHashSet."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"HashMap")," - Keys are stored in Random order"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TreeMap")," - Keys are sorted in natural order"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"LinkedHashSet")," - Keys are stored in insertion order."),(0,r.kt)("h3",{id:"map-is-not-part-of-collection-why"},"Map is not part of collection why?"),(0,r.kt)("p",null,"It is part of the collection framework but it doesn","'","t implement the java.util.Collection interface. The Collection interface is implemented by (is the root of) List-like Collections while Map is implemented by (is the root of) the KEY-VALUE-like collections"),(0,r.kt)("h2",{id:"collections-class"},"Collections class"),(0,r.kt)("p",null,"Collections class is a utility class which has number of static methods to help developers operate on Collection data structure in easier way. Few methods available with Collections class are as follow"),(0,r.kt)("p",null,"sort(), max(), min(), reverseOrder(), shuffle()"),(0,r.kt)("h2",{id:"java-8-streams-api"},"Java 8 Streams API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Employee {\n\n    Integer grade;\n    String name;\n    Integer age;\n\n    // getters and setters\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Data Setup")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<Employee> employeeList = new ArrayList<>();\nemployeeList.add(new Employee(3, "Vicky", 25));\nemployeeList.add(new Employee(3, "Dinesh", 22));\nemployeeList.add(new Employee(3, "Ganesh", 24));\nemployeeList.add(new Employee(1, "Ravi", 34));\nemployeeList.add(new Employee(1, "Sathappan", 33));\nemployeeList.add(new Employee(2, "Meenakshi", 31));\nemployeeList.add(new Employee(2, "Mahesh", 30));\n')),(0,r.kt)("h3",{id:"stream-samples"},"Stream Samples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"\nMap<Integer, List<Employee>> employeeGradeMap = employeeList.stream()\n    .collect(Collectors.groupingBy(Employee::getGrade));\n\nMap<Integer, List<String>> employeeNameListGroupedByGrade = employeeList.stream()\n    .collect(Collectors.groupingBy(Employee::getGrade,\n                Collectors.mapping(Employee::getName, Collectors.toList())));\n\nMap<Integer, List<Integer>> employeeAgeListGroupedByGrade = employeeList.stream()\n    .collect(Collectors.groupingBy(Employee::getGrade,\n                Collectors.mapping(Employee::getAge,\n                Collectors.toList())));\n\nMap<Integer, Long> employeeCountAsLongBasedOnGrade = employeeList.stream()\n    .collect(Collectors.groupingBy(Employee::getGrade,\n                Collectors.counting()));\n\nMap<Integer, Integer> employeeCountAsIntegerBasedOnGrade = employeeList.stream()\n    .collect(Collectors.groupingBy(Employee::getGrade,\n                Collectors.collectingAndThen(Collectors.counting(),\n                Long::intValue)));\n\n")))}d.isMDXComponent=!0}}]);